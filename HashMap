https://www.geeksforgeeks.org/internal-working-of-hashmap-java/

In this article, we will see how hashmap’s get and put method works internally. What operations are performed. How the hashing is done. How the value is fetched by key. How the key-value pair is stored.

As in previous article, HashMap contains an array of Node and Node can represent a class having following objects :

int hash
K key
V value
Node next

> Hashing is a process of converting an object into integer form by using the method hashCode(). Its necessary to write hashCode() method properly for better performance of HashMap
> default size that is 16
> As HashMap also allows null key, so hash code of null will always be 0
> It indicates the implementation of hashCode() is native because there is not any direct method in java to fetch the reference of object.
> In HashMap, hashCode() is used to calculate the bucket and therefore calculate the index.
> HashMap uses equals() to compare the key whether the are equal or not.

In java equals() method is used to compare equality of two Objects. The equality can be compared in two ways:

Shallow comparison:
      > The default implementation of equals method is defined in Java.lang.Object class which simply checks if two Object references (say x and y) refer to the same Object. i.e. It checks if x == y. Since Object class has no data members that define its state, it is also known as shallow comparison.
Deep Comparison: 
      >Suppose a class provides its own implementation of equals() method in order to compare the Objects of that class w.r.t state of the Objects. That means data members (i.e. fields) of Objects are to be compared with one another. Such Comparison based on data members is known as deep comparison

-----------------------Buckets------------------------
A bucket is one element of HashMap array. It is used to store nodes. Two or more nodes can have the same bucket. In that case link list structure is used to connect the nodes. Buckets are different in capacity. A relation between bucket and capacity is as follows:

capacity = number of buckets * load factor
A single bucket can have more than one nodes, it depends on hashCode() method. The better your hashCode() method is, the better your buckets will be utilized.


--------------------Inserting Key-Value Pair-----------------
-----------Putting one key-value pair in above HashMap-------

 > map.put(new Key("vishal"), 20);
Steps:

1.Calculate hash code of Key {“vishal”}. It will be generated as 118.
2.Calculate index by using index method it will be 6.
  > index = hashCode(key) & (n-1).
3.Create a node object as :
      {
        int hash = 118

        // {"vishal"} is not a string but 
        // an object of class Key
        Key key = {"vishal"}

        Integer value = 20
        Node next = null
      }
4.Place this object at index 6, if no other object is presented there.

---------------------Using get method()---------------------
Now lets try some get method to get a value. get(K key) method is used to get a value by its key. 
If you don’t know the key then it is not possible to fetch a value.

Fetch the data for key sachin:
map.get(new Key("sachin"));

Steps:
1.Calculate hash code of Key {“sachin”}. It will be generated as 115.
2.Calculate index by using index method it will be 3.
3.Go to index 3 of array and compare first element’s key with given key. If both are equals then return the value, otherwise check for next element if it exists.
4.In our case it is found as first element and returned value is 30.
